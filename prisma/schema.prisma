// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
    // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    password      String?
    emailVerified DateTime? @map("email_verified")
    image         String?

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    accounts     Account[]
    sessions     Session[]
    TeacherClass TeacherClass[]
    StudentClass StudentClass[]
    Post         Post[]
    Comment      Comment[]
    Like         Like[]
    Class        Class[]

    @@map("users")
}

model Account {
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
    @@map("account")
}

model Session {
    sessionToken String   @unique @map("session_token")
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("session")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
    @@map("verification_token")
}

model Class {
    id          String  @id @default(cuid())
    title       String
    description String
    section     String?
    subject     String?
    room        String?
    user        User    @relation(fields: [userId], references: [id])
    userId      String

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    TeacherClass TeacherClass[]
    StudentClass StudentClass[]

    @@map("class")
}

model ClassSettings {
    id         String @id @default(cuid())
    inviteCode String @map("invite_code")

    @@map("class_settings")
}

model TeacherClass {
    user    User   @relation(fields: [userId], references: [id])
    userId  String @map("user_id")
    class   Class  @relation(fields: [classId], references: [id])
    classId String @map("class_id")

    @@id([userId, classId])
    @@map("teacher_class")
}

model StudentClass {
    user    User   @relation(fields: [userId], references: [id])
    userId  String @map("user_id")
    class   Class  @relation(fields: [classId], references: [id])
    classId String @map("class_id")

    @@id([userId, classId])
    @@map("student_class")
}

model Topic {
    id       String @id @default(cuid())
    title    String
    position Float  @unique @default(dbgenerated("nextval('topic_position_seq')"))

    Post Post[]

    @@map("topic")
}

model Post {
    id       String   @id @default(cuid())
    title    String
    content  String
    type     PostType
    position Float    @unique @default(dbgenerated("nextval('post_position_seq')"))

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    topic   Topic?  @relation(fields: [topicId], references: [id])
    topicId String? @map("topic_id")
    user    User    @relation(fields: [userId], references: [id])
    userId  String  @map("user_id")

    Link    Link[]
    Comment Comment[]

    @@map("post")
}

model Link {
    id    String   @id @default(cuid())
    title String
    url   String
    type  LinkType

    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String @map("post_id")

    @@map("link")
}

model Comment {
    id      String @id @default(cuid())
    title   String
    content String

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
    post     Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId   String
    parent   Comment @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
    parentId String

    Comment Comment[] @relation("ParentChild")
    Like    Like[]

    @@map("comment")
}

model Like {
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String

    @@id([userId, commentId])
    @@map("like")
}

enum PostType {
    ANNOUNCEMENT
    ASSIGNMENT
    TEST
    MATERIAL
}

enum LinkType {
    YOUTUBE
    GITHUB
    FORM
    WHITEBOARD
    OTHER
}